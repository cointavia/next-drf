"""
Django settings for drfBackend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
import boto3
from django.core.exceptions import ImproperlyConfigured
import json
import os




def get_secret(name):
    client = boto3.client('secretsmanager', region_name='us-east-1')
    try:
        secret_value = client.get_secret_value(SecretId=name)
        secret = json.loads(secret_value['SecretString'])
        # print("Got secret")
        # print(secret)
        return secret
    except client.exceptions.ResourceNotFoundException:
        raise ImproperlyConfigured(f'Secret {name} not found in AWS Secrets Manager.')

def get_ssm_parameter(name):
    client = boto3.client('ssm', region_name='us-east-1')
    try:
        return client.get_parameter(Name=name, WithDecryption=True)['Parameter']['Value']
    except client.exceptions.ParameterNotFound:
        raise ImproperlyConfigured(f'SSM Parameter {name} not found.')


AUTH_PROVIDER = os.getenv("AUTH_PROVIDER", "custom") # Default to custom authentication
AWS_REGION=config('AWS_REGION')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-9p%0joq3v3&=+u51nw%f*dt9cxh_6z6g1+p6s%#a#_ir(u*b)0"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:3000',  # Your Next.js frontend
    'http://localhost:3000',  # Your Next.js frontend
    'https://your-production-url.com',  # Your production frontend
]

# Allow all origins during development (this should be restricted in production)
CORS_ALLOW_ALL_ORIGINS = True

# Allow credentials (important if using cookies for tokens)
CORS_ALLOW_CREDENTIALS = True


# Add specific allowed methods and headers
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
    'x-csrftoken',
    'access-control-allow-origin',
    'accept',
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'nextDrfAuth.authentication.APIKeyAuthentication', 
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}



# Application definition

INSTALLED_APPS = [
    "nextDrfAuth",
    "corsheaders",
    "rest_framework",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "nextDrfAuth.authentication.APIKeyMiddleware",
]

ROOT_URLCONF = "drfBackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "drfBackend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


if config('NEXT_DRF_ENV') == 'production':
    secret_name = config('DATABASE_SECRET_NAME', default='my_secret')
    secret = get_secret(secret_name)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': get_ssm_parameter('/decca/api/DB_NAME'),
            'USER': secret['username'],
            'PASSWORD': secret['password'],
            'HOST': get_ssm_parameter('/decca/api/DB_HOST'),
            'PORT': get_ssm_parameter('/decca/api/DB_PORT'),
        }
    }
else:  # Local development fallback
    DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',  # or your preferred DB engine
                'NAME': config('DB_NAME'),
                'USER': config('DB_USER'),
                'PASSWORD': config('DB_PASSWORD'),
                'HOST': config('DB_HOST'),
                'PORT': config('DB_PORT'),
                'OPTIONS': {
                    'charset': 'utf8mb4',
                    'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                },
            }
        }



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"





LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # or 'INFO' for less verbose output
    },
}


